// Time Complexity : O(n) no. of nodes
// Space Complexity :O(1) 
// Did this code successfully run on Leetcode :
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<Integer> value;
    public int kthSmallest(TreeNode root, int k) {
        if(root == null)
            return -1;
        value = new ArrayList<>();
        inorder(root);
        //System.out.println(value);
        
        return value.get(k-1);
        
    }
    
    private void inorder(TreeNode root)
    {
        //base
        if(root == null)
            return;
        
        //logic
        inorder(root.left);
        value.add(root.val);
        inorder(root.right);
        
    }
}
